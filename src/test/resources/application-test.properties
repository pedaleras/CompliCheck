# Configuração do Banco de Dados H2 em memória para o perfil 'test'
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Configurações JPA/Hibernate para o perfil 'test'
# Usar um dialeto H2 que garanta a sintaxe correta para auto-incremento
# Pode ser necessário usar um dialeto mais antigo ou ajustar a propriedade de geração de IDs.
# Vamos tentar remover a propriedade database-platform e confiar na autodeteccao,
# ou usar um dialeto que se alinha com a versao do H2.
# Para H2 2.x, o dialeto mais comum e funcional é o H2Dialect mesmo,
# mas o problema pode estar na forma como o Hibernate 6.x interpreta "generated as identity" para H2.
# Uma solução comum é configurar uma estratégia de geração de ID mais explícita se o default não funcionar.
# Por agora, vamos manter o H2Dialect e focar na estratégia de ID se o problema persistir.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Cria o schema do banco de dados a cada execução de teste
spring.jpa.hibernate.ddl-auto=create-drop

# Opcional: para ver as queries SQL sendo executadas durante os testes
spring.jpa.show-sql=true

# Desabilita o Flyway para o perfil de teste
# O 'ddl-auto=create-drop' do Hibernate já cuida da criação do schema para os testes.
spring.flyway.enabled=false

# Para garantir que o RestAssuredSetup.java use a porta aleatória corretamente
# Isso é mais uma garantia, mas @LocalServerPort já deveria configurar a porta em RestAssured.port
# server.port=${local.server.port} # Geralmente não é necessário, o Spring já gerencia a porta aleatória para testes.